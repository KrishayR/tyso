import time
import cv2
import mediapipe as mp
import numpy as np


mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose

# Video feed
cap = cv2.VideoCapture(0)

# Counter 
counter = 0
stage = None
heel_moving = False
rep_time_threshold = 1


def calculate_angles(a, b, c):
    a = np.array(a)
    b = np.array(b)
    c = np.array(c)

    radians = np.arctan2(c[1] - b[1], c[0]-b[0]) - np.arctan2(a[1]-b[1], a[0]-b[0])
    angle = np.abs(radians * 180.0/np.pi)
    
    if angle > 180.0:
        angle = 360-angle
    
    return angle


# Change confidence to be tighter on user's form
with mp_pose.Pose(min_detection_confidence=0.8, min_tracking_confidence=0.6) as pose:
    while cap.isOpened():
        ret, frame = cap.read()

        # Recolor to RGB
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image.flags.writeable = False # Improves Performance

        # Detection
        results = pose.process(image)

        # Recolor back to BGR
        image.flags.writeable = True
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR) # Improves Performance

        # Extract Landmarks
        try:
            if results.pose_landmarks is not None:
                landmarks = results.pose_landmarks.landmark

                # Calf raise
                left_heel = landmarks[mp_pose.PoseLandmark.LEFT_HEEL.value]
                right_heel = landmarks[mp_pose.PoseLandmark.RIGHT_HEEL.value]

                # Define threshold for heel touching ground
                heel_threshold = 0.05

                # Check if both heels are above the foot index (up position)
                if left_heel.y > landmarks[mp_pose.PoseLandmark.LEFT_FOOT_INDEX.value].y and right_heel.y > landmarks[mp_pose.PoseLandmark.RIGHT_FOOT_INDEX.value].y:
                    if not heel_moving:
                        heel_moving = True
                        start_time = time.time()
                    else:
                        # Check if both heels touch the ground (down position)
                        if left_heel.y <= landmarks[mp_pose.PoseLandmark.LEFT_FOOT_INDEX.value].y - heel_threshold and right_heel.y <= landmarks[mp_pose.PoseLandmark.RIGHT_FOOT_INDEX.value].y - heel_threshold:
                            heel_moving = False
                            end_time = time.time()
                            elapsed_time = end_time - start_time
                            if elapsed_time <= rep_time_threshold:
                                counter += 1
                else:
                    heel_moving = False

        except Exception as err:
            print(err)






        # Counter text
        cv2.rectangle(image, (0, 0), (225, 73), (51, 68, 255), -1)
        cv2.putText(image, "REPS: ", (15, 12), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
        cv2.putText(image, str(counter), (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 0), 2, cv2.LINE_AA)

        # Rendering connections
        mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,
            mp_drawing.DrawingSpec(color=(56, 55, 54), thickness=2, circle_radius=2),
            mp_drawing.DrawingSpec(color=(51, 68, 255), thickness=2, circle_radius=2)
        )

        cv2.imshow('Cam', image)

        if cv2.waitKey(10) & 0xFF == ord("q"):
            break

    cap.release()
    cv2.destroyAllWindows()